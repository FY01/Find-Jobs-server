/*
 * @Descripttion: 
 * @version: 
 * @@Company: 
 * @Author: FY01
 * @Date: 2021-07-31 11:19:36
 * @LastEditors: Please set LastEditors
 * @LastEditTime: 2022-03-02 11:20:09
 */

// #!/usr/bin / env node 

/**
 * 依赖项
 */

const app = require('../app');
const debug = require('debug')('gzhipin-server:server');
const http = require('http');

/**
 * 设置端口
 */
// 开发端
// const port = normalizePort(process.env.PORT || '4000');
// 生产端
const port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * 开启一个服务
 */

const server = http.createServer(app);

// 开启一个socketio server
require('../socketIO/sockerIo-server')(server)

/**
 * 监听端口
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * 初始化端口
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

/**
 * 监听服务器错误
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // 提示错误
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
